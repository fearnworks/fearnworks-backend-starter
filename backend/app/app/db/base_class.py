"""
This module defines the CustomBase class, which serves as a base class for all
SQLAlchemy models in the application.
"""

import typing as t

from sqlalchemy.orm import declarative_base, declared_attr

class_registry: t.Dict = {}


Base = declarative_base(class_registry=class_registry)


class CustomBase(Base):
    """
    Custom base class for all SQLAlchemy models in the application.

    This class inherits from the `Base` class created by `declarative_base` and
    defines custom behavior and attributes that should be applied to all models.

    Attributes:
        id: The primary key of the model.
        __name__: The name of the model.
    """

    __abstract__ = True
    id: t.Any
    __name__: str

    # Generate __tablename__ automatically
    @declared_attr
    def __tablename__(cls) -> str:
        """
        Generate the table name for the model automatically.

        The table name is generated by converting the name of the model to lowercase.

        Returns:
            The generated table name.
        """
        return cls.__name__.lower()
